\ String, symbol and keyword handlers.
\ Strings are stored as two cells and a buffer:
\ [ %string | length | chars...]
\ The buffer may be padded to a round length, but that's the GC's business.

: s>len  ( string -- 'length ) cell+ ;
: s>data ( string -- c-addr  ) 2 cells + ;
: length ( string -- length ) s>len @ ;
: s>str  ( string -- c-addr u ) dup s>data swap length ;

\ Printer
\ TODO: Handle escapes and print-readably.
:noname ( string -- )
  [CHAR] " pinch   s>str prn-type   [CHAR] " pinch ; %string method-of (pr-str)

\ Symbols are stored like strings but with a different type.
:noname ( symbol -- ) s>str prn-type ; %symbol method-of (pr-str)

\ Likewise keywords are stored as strings (without their colon)
\ TODO: Intern keywords as intended!
:noname ( keyword -- ) [char] : pinch   s>str prn-type ; %keyword method-of (pr-str)

\ Constructors ===============================================================
: (>stringy) ( c-addr u %type -- value )
  over 2 cells + aligned allocate throw >R
  R@ !                \ Write the type ( c-addr u   R: value )
  dup R@ s>len !      \ And the length ( c-addr u   R: value )
  R@ s>data swap move \ Copy the contents ( R: value )
  R> ;

: >symbol  ( c-addr u -- symbol ) %symbol  (>stringy) ;
: >string  ( c-addr u -- string ) %string  (>stringy) ;
: >keyword ( c-addr u -- keyword) %keyword (>stringy) ;

\ Comparison =================================================================
:noname ( x y -- -1|0|1 )
  %?cmp
  2dup >R s>str R> s>str ( x y x-addr xu y-addr yu )
  rot min 0 ?DO ( x y x-addr y-addr )
    over i + c@   over i + c@   cmp ?dup IF ( x y x-addr y-addr -1|1 )
      >R 2drop 2drop R> UNLOOP EXIT THEN
  LOOP ( x y x-addr y-addr )
  2drop \ The longer string is the winner.
  length >R length R> cmp ;
  dup %string  method-of compare
  dup %symbol  method-of compare
      %keyword method-of compare

\ Eval =======================================================================
\ Strings and keywords are already eval'd.
\ Symbols, however, eval by being looked up in the environment.
CREATE fail-get-sentinel

6 CONSTANT err-unknown-symbol

:noname ( env symbol -- value )
  swap fail-get-sentinel -rot ( default symbol env )
  get-or                      ( value|fail-get-sentinel )
  dup fail-get-sentinel = IF drop err-unknown-symbol throw THEN ;
%symbol method-of eval-ast

