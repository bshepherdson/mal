\ Lists library for general Forths.
\ A list is either NIL or a three-cell ALLOCATEd block containing
\ [ %LIST | head | tail ]

CREATE empty-list %LIST , 0 , 0 ,

: l>head ( list -- 'head ) cell+ ;
: l>tail ( list -- 'tail ) 2 cells + ;
: head   ( list -- head )  l>head @ ;
: tail   ( list -- tail )  l>tail @ ;

: list?   ( x -- list? ) @ %list = ;
: emptyl? ( list -- ? ) empty-list = ;

: countl ( list -- length )
  0 BEGIN over emptyl? 0= WHILE 1+ >R tail R> REPEAT nip ;

\ : allocl ( -- ) 3 cells allocate throw
\   %list over !
\   nil over l>head !
\   nil over l>tail ! ;

: cons ( head tail -- list )
  3 cells allocate throw >R
  %list R@ !
  R@ l>tail !
  R@ l>head !
  R> ;

: reverse ( list1 -- list2 )
  empty-list BEGIN over emptyl? 0= WHILE over head swap cons >R tail R> REPEAT nip ;

: revlist>vector ( list -- vector )
  dup countl allocv swap ( vector list )
  over countv ?dup 0= IF drop EXIT THEN ( vector list count )
  1- 0 swap DO \ I is the index ( vector list )
    2dup head i rot atv ! ( vector list )
    tail
  -1 +LOOP drop ;

: (pr-list-sep) ( list -- ) tail emptyl? 0= IF bl pinch THEN ;

:noname ( list -- )
  [CHAR] ( pinch
  BEGIN dup emptyl? 0= WHILE dup head (pr-str)   dup (pr-list-sep)   tail REPEAT
  drop [CHAR] ) pinch ;   %list method-of (pr-str)
