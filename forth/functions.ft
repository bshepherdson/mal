\ Functions ==================================================================
\ [ %builtin  | xt ]
\ [ %function | env | params | body ]

: builtin ( xt -- fn )
  %builtin 2 alloc-typed >R
  R@ cell+ !
  nil R@ 2 cells + !
  nil R@ 3 cells + !
  R> ;

: f>env    cell+ ;
: f>params 2 cells + ;
: f>body   3 cells + ;

: function ( env params body -- fn )
  %function 4 alloc-typed >R
  R@ f>body   !
  R@ f>params !
  R@ f>env    !
  R> ;

: function? ( value -- ? ) % %function = ;
: builtin?  ( value -- ? ) % %builtin  = ;
: fn? ( value -- ? ) dup function? swap builtin? or ;

: exec-function ( args function -- result )
  \ Need to create a new environment for the function, which descends from the
  \ closed environment with the params and arguments layered on top.
  dup >R   f>env @ swap   R@ f>params @ swap ( env params args   R: fn )
  env-zipping ( env   R: fn )
  R> f>body @ ( env body ) EVAL ;

: exec-builtin  ( args builtin  -- result ) cell+ @ execute ;

: exec-fn ( args fn -- result )
  dup builtin? IF exec-builtin ELSE exec-function THEN ;

:noname drop S" #<builtin>"  prn-type ; %builtin  method-of (pr-str)
:noname drop S" #<function>" prn-type ; %function method-of (pr-str)
